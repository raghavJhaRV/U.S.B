generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id       String         @id @default(cuid())
  gender   String
  ageGroup String
  events   Event[]
  players  Registration[]

  @@unique([gender, ageGroup], name: "gender_ageGroup")
}

model Program {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String
  season        String
  price         Float
  registrations Registration[]
}

model Registration {
  id             String   @id @default(cuid())
  playerName     String
  parentName     String
  email          String
  phone          String
  waiverAccepted Boolean
  createdAt      DateTime @default(now())
  waiverUrl      String?
  eTransferNote  String?
  teamId         String
  programId      String
  paymentStatus  String   @default("pending") // pending, paid, failed
  payment        Payment? @relation("RegistrationPayment")
  program        Program  @relation(fields: [programId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])
}

model Event {
  id            String    @id @default(cuid())
  title         String
  date          DateTime
  teamId        String
  createdAt     DateTime  @default(now())
  description   String?
  endTime       DateTime?
  isActive      Boolean   @default(true)
  location      String?
  type          String    @default("game")
  updatedAt     DateTime  @updatedAt
  livestreamUrl String?
  team          Team      @relation(fields: [teamId], references: [id])
}

model News {
  id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id        String   @id @default(uuid())
  title     String
  url       String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  userId    String?
  itemId    String?
  itemType  String?
  amount    Decimal
  currency  String
  status    String
  stripeId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Merchandise {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String
  stock       Int
  category    String
  created_at  DateTime @default(now())
  isActive    Boolean  @default(true)
  updated_at  DateTime @updatedAt
}

model Payment {
  id                    String        @id @default(cuid())
  registrationId        String?       @unique
  amount                Int
  createdAt             DateTime      @default(now())
  currency              String        @default("usd")
  customerEmail         String?
  customerName          String?
  metadata              Json?
  status                String
  stripePaymentIntentId String?       @unique
  type                  String
  updatedAt             DateTime      @updatedAt
  registration          Registration? @relation("RegistrationPayment", fields: [registrationId], references: [id])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String?
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
